void initBot() {
  Serial.println("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞...");

  bot.setToken(botToken);
  bot.setChatID(chatID);
 
  bot.setTextMode(FB_HTML);

  bot.skipUpdates(); // –Ü–≥–Ω–æ—Ä—É–≤–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

  bot.attach(newMsg);

  bot.showMenuText("üí°", replyKeyboard(), chatID);

  if (!validKey) bot.sendMessage("‚ùóÔ∏è –ü—Ä–∏—Å—Ç—Ä—ñ–π –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ! " + checkKeyMessage + " –ó–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –≤ —Å–ª—É–∂–±—É –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ @alarm_map_support.");
}

void newMsg(FB_msg& msg) {
  #ifdef DEBUG
    Serial.println(msg.toString());
  #endif

  String chat_id = msg.chatID;
  String text = msg.text;
  String data = msg.data;
  int message_id = msg.messageID;
  bool query = msg.query;
  
  if (text == "/start") {
    bot.showMenuText("üëã", replyKeyboard());
  }

  else if (text == "‚èØüí°") {
    if (enabledStrip) {
      turnOffStrip();
      bot.sendMessage("‚è∏üí°");
    } else {
      turnOnStrip();
      bot.sendMessage("‚ñ∂Ô∏èüí°");
    }
  }

  else if (text == "‚èØüì∫") {
    if (enabledDisplay) {
      turnOffDisplay();
      bot.sendMessage("‚è∏üì∫");
    } else {
      turnOnDisplay();
      bot.sendMessage("‚ñ∂Ô∏èüì∫");
    }
  }

  else if (text == "üîÜ –ó–º—ñ–Ω–∏—Ç–∏ —è—Å–∫—Ä–∞–≤—ñ—Å—Ç—å" ||
      data == "100" || data == "75" || data == "50" || data == "25" || data == "1" ||
      data == "enable_auto_brightness") {

    if (data == "100" || data == "75" || data == "50" || data == "25" || data == "1") {
      autoBrightness = false;
      if (data.toInt() != brightness) {
        changeBrightness(data.toInt(), false);
      }
    }

    if (data == "enable_auto_brightness") {
      autoBrightness = true;
      changeMemoryValue("led_strip", "auto_brightness", autoBrightness);
    }

    String keyboard = "100%\t 75%\t 50%\t 25%\t 1%";
    String callback = "100, 75, 50, 25, 1";
    if (!autoBrightness) {
      keyboard += "\nü§ñ –ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∞–≤—Ç–æ—è—Å–∫—Ä–∞–≤—ñ—Å—Ç—å";
      callback += ",enable_auto_brightness";
    }

    if (!query) {
      bot.inlineMenuCallback("üîÜ –û–±–µ—Ä–∏ –∑–Ω–∞—á–µ–Ω–Ω—è:", keyboard, callback);
    } else {
      bot.editMessage(message_id, "üîÜ –û–±–µ—Ä–∏ –∑–Ω–∞—á–µ–Ω–Ω—è:");
      bot.editMenuCallback(message_id, keyboard, callback);
    }
  } 
  
  else if ((text == "üî¢üí°" || data == "choose_mode" ||
      data == "alarms_mode" || data == "flag_mode" || data == "flashlight_mode" || data == "alarm_mode" ||
      data == "white" || data == "red" || data == "orange" || data == "yellow" || data == "green" || data == "blue" || data == "purple" ||
      data == "enable_auto_switch" || data == "disable_auto_switch") && 
      validKey) {

    if (data == "alarms_mode") mode = 0;
    if (data == "flag_mode") mode = 1;
    if (data == "alarm_mode") mode = 3;
    
    if (data == "enable_auto_switch" || data == "disable_auto_switch") {
      if (data == "enable_auto_switch") autoSwitch = true;
      if (data == "disable_auto_switch") autoSwitch = false;
      changeMemoryValue("alarms", "auto_switch", autoSwitch);
    }

    String keyboard;
    String callback;

    if (mode != 0 || autoSwitch) {
      keyboard += "üö® –¢—Ä–∏–≤–æ–≥–∏\n";
      callback += "alarms_mode,";
    } 
    if (mode != 3 || autoSwitch) {
      keyboard += "üö® –¢—Ä–∏–≤–æ–≥–∞ –≤ –¥–æ–º–∞—à–Ω—å–æ–º—É —Ä–µ–≥—ñ–æ–Ω—ñ\n";
      callback += "alarm_mode,";
    }
    if (mode != 1 || autoSwitch) {
      keyboard += "üá∫üá¶ –ü—Ä–∞–ø–æ—Ä\n";
      callback += "flag_mode,";
    }
    keyboard += "üî¶ –õ—ñ—Ö—Ç–∞—Ä–∏–∫\n";
    callback += "flashlight_mode,";
    if (!autoSwitch) {
      keyboard += "ü§ñ –ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∞–≤—Ç–æ–∑–º—ñ–Ω–µ–Ω–Ω—è";
      callback += "enable_auto_switch";
    } else {
      keyboard += "ü§ñ –î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∞–≤—Ç–æ–∑–º—ñ–Ω–µ–Ω–Ω—è";
      callback += "disable_auto_switch";
    }

    if (!query) {
      bot.inlineMenuCallback("üî¢ –û–±–µ—Ä–∏ —Ä–µ–∂–∏–º:", keyboard, callback);
    } else {
      if (data == "flashlight_mode" || 
          data == "white" || data == "red" || data == "orange" || data == "yellow" || data == "green" || data == "blue" || data == "purple") {

        if (data == "white" || data == "red" || data == "orange" || data == "yellow" || data == "green" || data == "blue" || data == "purple") {
          mode = 2;
          color = data;
        }

        String keyboard = "‚ö™Ô∏è –ë—ñ–ª–∏–π\n üî¥ –ß–µ—Ä–≤–æ–Ω–∏–π\n üü† –ü–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π\n üü° –ñ–æ–≤—Ç–∏–π\n üü¢ –ó–µ–ª–µ–Ω–∏–π\n üîµ –°–∏–Ω—ñ–π\n üü£ –§—ñ–æ–ª–µ—Ç–æ–≤–∏–π\n ‚óÄÔ∏è –ù–∞–∑–∞–¥";
        String callback = "white, red, orange, yellow, green, blue, purple, choose_mode";

        bot.editMessage(message_id, "üî¶ –û–±–µ—Ä–∏ –∫–æ–ª—ñ—Ä –≤ –º–µ–Ω—é:");
        bot.editMenuCallback(message_id, keyboard, callback);
      } else {
        bot.editMessage(message_id, "üî¢ –û–±–µ—Ä–∏ —Ä–µ–∂–∏–º:");
        bot.editMenuCallback(message_id, keyboard, callback);
      }
    }
  } 

  else if ((text == "üî¢üì∫" || data == "choose_display_mode" ||
      data == "time_info" || data == "date_info" || data == "conditions_info" || data == "weather_info" || data == "alarm_info" || data == "war_info" || data == "currency_info" || 
      data == "enable_auto_switch_display" || data == "disable_auto_switch_display") && 
      validKey) {

    if (modesCount > 1) {
      if (data == "time_info" || data == "date_info" || data == "conditions_info"  || data == "weather_info" || data == "alarm_info" || data == "war_info" || data == "currency_info") {
        if (data == "time_info") displayMode = TIME_MODE;
        else if (data == "date_info") displayMode = DATE_MODE;
        else if (data == "conditions_info") displayMode = CONDITIONS_MODE;
        else if (data == "weather_info") displayMode = WEATHER_MODE;
        else if (data == "alarm_info") displayMode = ALARM_INFO_MODE;
        else if (data == "war_info") displayMode = WAR_MODE;
        else if (data == "currency_info") displayMode = CURRENCY_MODE;

        changeMemoryValue("display", "mode", displayMode);

        autoSwitchDisplay = false;
        enabledDisplay = true;
        
        dsiplayInfo();
      } else if (data == "enable_auto_switch_display") {autoSwitchDisplay = true; enabledDisplay = true;}
      else if (data == "disable_auto_switch_display") {autoSwitchDisplay = false; enabledDisplay = true;}

      changeMemoryValue("display", "auto_switch", autoSwitchDisplay);

      String keyboard;
      String callback;

      if (displayModes[TIME_MODE] && (displayMode != TIME_MODE || autoSwitchDisplay)) {
        keyboard += "üïë –ß–∞—Å\n";
        callback += "time_info,";
      } 
      if (displayModes[DATE_MODE] && (displayMode != DATE_MODE || autoSwitchDisplay)) {
        keyboard += "üóì –î–∞—Ç–∞\n";
        callback += "date_info,";
      } 
      if (displayModes[CONDITIONS_MODE] && (displayMode != CONDITIONS_MODE || autoSwitchDisplay)) {
        keyboard += "üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —ñ –≤–æ–ª–æ–≥—ñ—Å—Ç—å\n";
        callback += "conditions_info,";
      }
      if (displayModes[WEATHER_MODE] && (displayMode != WEATHER_MODE || autoSwitchDisplay)) {
        keyboard += "‚õÖÔ∏è –ü–æ–≥–æ–¥–∞\n";
        callback += "weather_info,";
      }
      if (displayModes[ALARM_INFO_MODE] && (displayMode != ALARM_INFO_MODE || autoSwitchDisplay)) {
        keyboard += "üö® –î–∞–Ω—ñ –ø—Ä–æ —Ç—Ä–∏–≤–æ–≥—É\n";
        callback += "alarm_info,";
      } 
      if (displayModes[WAR_MODE] && (displayMode != WAR_MODE || autoSwitchDisplay)) {
        keyboard += "‚öîÔ∏è –î–∞–Ω—ñ –ø—Ä–æ –≤—ñ–π–Ω—É\n";
        callback += "war_info,";
      }
      if (displayModes[CURRENCY_MODE] && (displayMode != CURRENCY_MODE || autoSwitchDisplay)) {
        keyboard += "üí± –ö—É—Ä—Å –≤–∞–ª—é—Ç\n";
        callback += "currency_info,";
      }
      if (!autoSwitchDisplay) {
        keyboard += "ü§ñ –ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∞–≤—Ç–æ–ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è";
        callback += "enable_auto_switch_display";
      } else {
        keyboard += "ü§ñ –î–µ–∫–∞—Ç–∏–≤—É–≤–∞—Ç–∏ –∞–≤—Ç–æ–ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è";
        callback += "disable_auto_switch_display";
      }

      if (!query) {
        bot.inlineMenuCallback("üî¢ –û–±–µ—Ä–∏ —Ä–µ–∂–∏–º –¥–∏—Å–ø–ª–µ—é:", keyboard, callback);
      } else {
        bot.editMessage(message_id, "üî¢ –û–±–µ—Ä–∏ —Ä–µ–∂–∏–º –¥–∏—Å–ø–ª–µ—é:");
        bot.editMenuCallback(message_id, keyboard, callback);
      }
    } else if (modesCount == 1) bot.sendMessage("üî¢ –î–æ—Å—Ç—É–ø–Ω–∏–π –ª–∏—à–µ –æ–¥–∏–Ω —Ä–µ–∂–∏–º");
    else bot.sendMessage("üî¢ –†–µ–∂–∏–º–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ");
  } 
  
  else if (text == "‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è" && validKey) {
    String message = "<b>‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è</b>\n\n";
    
    message += "<b>‚úçÔ∏è –í–µ—Ä—Å—ñ—è –ø—Ä–æ—à–∏–≤–∫–∏: " + version + " (" + versionNumber + ")</b>\n\n";

    message += "<b>üè† IP:</b> <a href=\"http://" + WiFi.localIP().toString() + "/\">" + WiFi.localIP().toString() + "</a>";

    if (temperaturePresent) {
      message += "\n\n";
      message += "üå° " + String(getTemperature()) + "¬∞C\n";
      message += "üíß " + String(getHumidity()) + "%"; 
    }

    String keyboard = "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è\nüìÑ –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è\n‚òéÔ∏è C–ª—É–∂–±–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏\nüîÑ –†–µ—Å—Ç–∞—Ä—Ç";
    String callback = "http://" + WiFi.localIP().toString() + "/, https://raw.githubusercontent.com/danio273/alarm-map/main/docs/manual.pdf, https://t.me/alarm_map_support, restart";
    
    bot.inlineMenuCallback(message, keyboard, callback);
  }

  else if (data == "restart" && validKey) {
    bot.editMessage(message_id, "üîÑ");
    bot.tickManual();
    ESP.restart();
  }

  else if (data == "update") updateFirmware(message_id);

  else if (msg.OTA) {
    if (msg.text == "dev") {
      setMessageReaction(chat_id, message_id, "üëè");
      bot.update();
    } else setMessageReaction(chat_id, message_id, "ü•±");
  }

  else if (text == "‚ù§Ô∏è" && validKey) {
    String text = "üéÅ –í—ñ—Ç–∞—é! –¢–∏ –∑–Ω–∞–π—à–æ–≤ –ø–æ–¥–∞—Ä—É–Ω–æ–∫ - <b>–æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É –∑–Ω–∏–∂–∫—É 10%</b> –Ω–∞ —Ç–≤–æ—é –Ω–∞—Å—Ç—É–ø–Ω—É –ø–æ–∫—É–ø–∫—É —É <a href=\"https://t.me/alarm_map\">SDL Alarm Map</a> –∞–±–æ <a href=\"https://t.me/alarm_map_premium\">SDL Alarm Map Premium</a>!";
    bot.sendRequest("https://api.telegram.org/bot" + botToken + "/sendMessage?text=" + text + "&chat_id=" + chatID + "&disable_web_page_preview=true&parse_mode=HTML");
  }

  else if ((text == "üëé" || text == "üñï" || text == "üí©" || text == "ü§°" || text == "üë∫" || text == "ü§Æ") && validKey) 
    bot.inlineMenuCallback("üì© –©–æ–± –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –ø—Ä–æ–±–ª–µ–º—É, –≤–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–¥–≥—É–∫ –≤ —Å–ª—É–∂–±—É –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ @alarm_map_support!", "‚òéÔ∏è C–ª—É–∂–±–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏", "https://t.me/alarm_map_support");

  else if (text == "–ù–µ –ø—Ä–∞—Ü—é—î" && validKey) {
    bot.sendSticker("CAACAgIAAxkBAAEMAltmLjqbFMIdcJRUPgwzXswFHLwXMQACfUAAAnTlaUi6ZZ33MywfezQE");
    setMessageReaction(chat_id, message_id, "üñï");
    while (true);
  }

  else if (text == "–ü—Ä–∞—Ü—é—î" && validKey) {
    bot.setChatTitle("–ü—Ä–∞—Ü—é—î (SCAM)", chat_id);
    bot.setChatDescription("–î–∞–Ω–µ –¥–∂–µ—Ä–µ–ª–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó —î –≥—Ä—É–ø–æ—é, —â–æ –ø–æ—à–∏—Ä—é—î –Ω–µ–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω—ñ, –º–∞–Ω—ñ–ø—É–ª—è—Ç–∏–≤–Ω—ñ –∞–±–æ –≤–∏–≥–∞–¥–∞–Ω—ñ –¥–∞–Ω—ñ –∑ –º–µ—Ç–æ—é –≤–≤–µ–¥–µ–Ω–Ω—è –≤ –æ–º–∞–Ω—É –∞—É–¥–∏—Ç–æ—Ä—ñ—ó.", chat_id);
    bot.sendRequest("https://api.telegram.org/bot" + botToken + "/leaveChat?chat_id=" + chat_id);
  }

  else bot.deleteMessage(message_id);
}

String replyKeyboard() {
  String keyboard = "‚èØüí°";
  if (displayPresent) keyboard += "\t‚èØüì∫";
  keyboard += "\nüîÜ –ó–º—ñ–Ω–∏—Ç–∏ —è—Å–∫—Ä–∞–≤—ñ—Å—Ç—å";

  if (validKey) {
    keyboard += "\nüî¢üí°";
    if (displayPresent) keyboard += "\tüî¢üì∫";
    keyboard += "\n‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è";
  }

  return keyboard;
}

void setMessageReaction(String chat_id, int message_id, String emoji) {
  bot.sendRequest("https://api.telegram.org/bot" + botToken + "/setMessageReaction?chat_id=" + chat_id + "&message_id=" + String(message_id) + "&reaction=[{\"type\":\"emoji\",\"emoji\":\"" + emoji + "\"}]&is_big=true");
}