#define EMPTY ""

#include "variables.h"

int networksCount;

#include <ArduinoJson.h> 
String states[] = {"–ó–∞–∫–∞—Ä–ø–∞—Ç—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–¢–µ—Ä–Ω–æ–ø—ñ–ª—å—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–í–æ–ª–∏–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–†—ñ–≤–Ω–µ–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–ñ–∏—Ç–æ–º–∏—Ä—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–°—É–º—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–õ—É–≥–∞–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–•–µ—Ä—Å–æ–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–ê–† –ö—Ä–∏–º", "–û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–ú–∏–∫–æ–ª–∞—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–ß–µ—Ä–∫–∞—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–ö—ñ—Ä–æ–≤–æ–≥—Ä–∞–¥—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–í—ñ–Ω–Ω–∏—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–ß–µ—Ä–Ω—ñ–≤–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–º. –ö–∏—ó–≤"};
#define STATES_COUNT 26
int statesCount;
bool alarmFirstUpdate = true;

#include <FastBot.h>
FastBot bot;

#include <GyverNTP.h>
GyverNTP ntp;

// #include "SinricPro.h"
// #include "SinricProDimSwitch.h"
// #include "SinricProTemperatureSensor.h"

#include <Adafruit_NeoPixel.h>
Adafruit_NeoPixel strip(0, 255, NEO_GRB + NEO_KHZ800);

#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include "icons.h"
Adafruit_SSD1306 display;
int disy;
#define TIME_MODE 0
#define DATE_MODE 1
#define CONDITIONS_MODE 2
#define WEATHER_MODE 3
#define ALARM_INFO_MODE 4
#define WAR_MODE 5
#define CURRENCY_MODE 6

#include <GyverOS.h>
GyverOS<6> OS;

int mode; 
String color; 

int displayMode = -1;
int modesCount = 0;

//–ó–º—ñ–Ω–Ω—ñ –¥–ª—è —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ —ñ —Å—Ç–∞–Ω—É —Ç—Ä–∏–≤–æ–≥–∏
bool enabledStates[STATES_COUNT];
unsigned long startTime, duration;
bool homeCityEnable, lastEnable;

void setup() {
  Serial.begin(115200); 
  Serial.print("\n\n\n\n"); 

  initEEPROM();

  initStrip(); 

  if (displayPresent) initDisplay();

  if (autoBrightnessSource == 1) {
    Serial.println("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ñ–æ—Ç–æ—Ä–µ–∑–∏—Å—Ç–æ—Ä–∞...");
    pinMode(photoresistorPin, INPUT);
  }

  initWiFi();

  if (displayPresent && enabledDisplay) {
    display.clearDisplay();
    display.drawBitmap(0, 0 + disy, symbol, 32, 32, 1);
    display.setTextSize(1);
    displayCenter("SDL Alarm Map", 4, 100, 32);
    displayCenter(utf8cyr("–í–µ—Ä—Å—ñ—è " + version), 16, 100, 32);
    display.display();
  }

  validKey = checkKey(accesKey, checkKeyMessage);
  if (validKey) Serial.println("–ü—Ä–∏—Å—Ç—Ä—ñ–π –¥–æ—Å—Ç—É–ø–Ω–∏–π! " + checkKeyMessage);
  else Serial.println("–ü—Ä–∏—Å—Ç—Ä—ñ–π –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ! " + checkKeyMessage + " –ó–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –≤ —Å–ª—É–∂–±—É –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ @alarm_map_support (Telegram).");

  if (validKey) {
    if (soundSource == 1) initBuzzer();
    else if (soundSource == 2) initSpeaker();

    if (integrationPresent) {
      Serial.println("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –¥–æ–¥–∞—Ç–∫–≤–æ–≥–æ –º–æ–¥—É–ª—é...");
      pinMode(integrationPin, OUTPUT); 
    }

    if (temperaturePresent) initTemperatureSensor();

    initTime();

    // if (!sinricKey.isEmpty()) initSinricPro();

    initOS();
  } else {
    if (displayPresent) {
      display.clearDisplay();
      display.drawBitmap(0, 0 + disy, settings, 32, 32, 1);
      display.setTextSize(1);
      displayCenter("alarm-map.local", 8, 100, 32);
      displayCenter(WiFi.localIP().toString(), 16, 100, 32);
    }
  }

  if (!botToken.isEmpty()) {
    initBot();

    checkUpdates(updateInfo);
    if (updateInfo[0].toInt() > versionNumber) {
      String message = "<b>üÜï –î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞ –≤–µ—Ä—Å—ñ—è!\n\n";

      message += "üìã –°–ø–∏—Å–æ–∫ –∑–º—ñ–Ω:</b>\n";
      message += updateInfo[3];

      bot.inlineMenuCallback(message, "üöÄ –û–Ω–æ–≤–∏—Ç–∏", "update");
    }
  }
}

void loop() {
  if (WiFiConnected()) {

    if (!botToken.isEmpty()) bot.tick();

    if (validKey) {

      ntp.tick();

      OS.tick();

      // if (!sinricKey.isEmpty()) SinricPro.handle();
    } else {
      if (enabledStrip) {
        for (int i = 100; i >= 1; --i) {
          strip.setBrightness(i * 2.55);
          strip.show();
          delay(10);
        }
        for (int i = 1; i <= 100; i++) {
          strip.setBrightness(i * 2.55);
          strip.show();
          delay(10);
        }
      }
    }
  } else {
    // if (enabledStrip) flagMode();
    // if (displayPresent && enabledDisplay) {
    //   display.clearDisplay();
    //   display.drawBitmap(0, 0 + disy, dino, 28, 32, 1);
    //   display.setTextSize(1);
    //   display.setCursor(32, 0 + disy);    
    //   display.println(utf8cyr("–ó–≤'—è–∑–æ–∫ –∑ –º–µ—Ä–µ–∂–µ—é"));
    //   display.setCursor(32, 8 + disy);
    //   // display.println(utf8cyr("–≤—Ç—Ä–∞—á–µ–Ω–æ. –ü–µ—Ä–µ-"));
    //   // display.setCursor(32, 16 + disy);
    //   // display.println(utf8cyr("–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑"));
    //   // display.setCursor(32, 24 + disy);
    //   // display.println(utf8cyr("10 —Å–µ–∫—É–Ω–¥!"));
    //   display.display();
    // }
    // Serial.println("–ó–≤'—è–∑–æ–∫ –∑ –º–µ—Ä–µ–∂–µ—é –≤—Ç—Ä–∞—á–µ–Ω–æ. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥!");
    // delay(10000);

    Serial.println("–ó–≤'—è–∑–æ–∫ –∑ –º–µ—Ä–µ–∂–µ—é –≤—Ç—Ä–∞—á–µ–Ω–æ!");

    ESP.restart();
  }
}